#include<stdio.h>

#include<stdlib.h>



struct node{
    
    struct node* left;
    int data;
    struct node* right;
};

void insert(struct node* ptr,int data){
    struct node * newnode=(struct node*)(malloc(sizeof(struct node)));
    newnode->data=data;
    newnode->left=NULL;
    newnode->right=NULL;
    
    struct node* slow=ptr;
    
    while(ptr!=NULL){  
        if(ptr->data==data){
            printf("%d already exist,can't be inserted in bst\n",data);
            free(newnode);
            break;// tum break karna bhul jaa rahe the ,jisse priblem
         
        }
        else if(ptr->data>data){
            if(ptr->left!=NULL){
                ptr=ptr->left;
                slow=ptr;
            }
            else{
                ptr=ptr->left;
               //tum yaga ptr=newnode kar  rahe the but  while loop ka 
               // condition hi fail ho ja raha tha.
                slow->left=newnode;
            }
           
        }
        else{
            if(ptr->right!=NULL){
                ptr=ptr->right;
                slow=ptr;
            }
            else{
                ptr=ptr->right;
                
                slow->right=newnode;
            }
            
        }
    }
   

}
void inTraversal(struct node *root){
    

if(root==NULL){
        return ;}


    inTraversal(root->left);
    printf("%d ", root->data);
    inTraversal(root->right);
    return ;

    }
 

struct node* node(int data){
    struct node * newnode=(struct node*)(malloc(sizeof(struct node)));
    newnode->data=data;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}



int main(){
     
    // Constructing the root node - Using Function (Recommended)
    struct node *root = node(4);
    struct node *p1 = node(1);
    struct node *p2 = node(6);
    struct node *p3 = node(5);
    struct node *p4 = node(2);
   

    // Linking the root node with left and right children
    root->left = p1;
    root->right = p2;
    p1->left = p3;
    p1->right = p4;
    insert(root,9);
 
   inTraversal(root);

    
return 0;}
    
